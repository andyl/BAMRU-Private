#!/usr/bin/env ruby

width    = 80
base_dir = "tmp/nq"
PID      = Process.pid
pid_file = base_dir + "/_nq_pid.txt"
prog = $0

system "mkdir -p #{base_dir}"

if ARGV.length > 0

  argv_copy = ARGV.map {|x| x}
  seq_arg   = argv_copy.find {|x| x.match(/-s/)}

  sequence = if seq_arg.nil? || seq_arg.empty?
    Time.now.strftime("%y%m%d_%H%M%S") + "_0"
  else
    seq_arg[2..-1]
  end

  argv_copy.delete(seq_arg)
  command = argv_copy.join(' ')

  cmd_file = base_dir + "/nq_#{sequence}_#{PID}.txt"
  File.open(cmd_file, 'w') { |f| f.puts command }
  puts " Wrote Cmd File: #{cmd_file} ".center(width, '=')
  puts command
  if File.exist?(pid_file)
    nq_pid = File.read(pid_file).chomp
    depth = Dir.glob("#{base_dir}/nq_*").length
    puts "Added to Queue | nq PID: #{nq_pid} | Queue Depth: #{depth}"
    puts "=" * width
    STDOUT.flush
    abort
  end
  puts "=" * width
  STDOUT.flush
end

File.open(pid_file, 'w') {|f| f.puts PID}

def ts() Time.now.strftime("%y-%m-%d_%H:%M:%S"); end

STDOUT.flush

sleep 2

while (file = Dir.glob("#{base_dir}/nq_*").sort.first) != nil do
  cmd = File.read(file).chomp
  depth = Dir.glob("#{base_dir}/nq_*").length
  puts (" Starting nq PID:#{PID} @ #{ts} ").center(width, '-')
  puts (" Using Cmd File: #{file.split('/').last} | Queue Depth: #{depth} ").center(width, '-')
  puts cmd
  STDOUT.flush
  system cmd
  puts (" Finished PID:#{PID} @ #{ts} ").center(width, '-')
  system "rm #{file}"
  STDOUT.flush
  sleep 4
end

STDOUT.flush

system "rm -f #{pid_file}"

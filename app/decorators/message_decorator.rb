class MessageDecorator < ApplicationDecorator
  decorates :message

  def mobile_json
    fields = ["id", "author_id", "text"]
    hash = subset(model.attributes, fields)
    hash[:creation_date] = model.created_at.strftime("%M-%y %H:%M") if model.created_at
    hash[:author_short_name] = model.author.try(:short_name)        if model.author
    hash[:rsvp_prompt]       = model.rsvp.prompt                    if model.rsvp
    hash[:rsvp_yes_prompt]   = model.rsvp.yes_prompt                if model.rsvp
    hash[:rsvp_no_prompt]    = model.rsvp.no_prompt                 if model.rsvp
    hash[:sent_count]        = model.distributions.count            if model.distributions
    hash[:read_count]        = model.distributions.read.count       if model.distributions
    hash[:rsvp_yes_count]    = model.distributions.rsvp_yes.count   if model.rsvp
    hash[:rsvp_no_count]     = model.distributions.rsvp_no.count    if model.rsvp
    hash.to_json
  end

  def self.mobile_json
    result = Message.order('id DESC').limit(10).map do |m|
      MessageDecorator.new(m).mobile_json
    end.join(',')
    "[#{result}]"
  end


  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #   
  #   Or, optionally enable "lazy helpers" by calling this method:
  #     lazy_helpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #   
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"), 
  #                   :class => 'timestamp'
  #   end
end